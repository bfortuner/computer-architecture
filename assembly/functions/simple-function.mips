# Calling math function without touching stack

main:

	# print input msg
	li $v0, 4
	la $a0, msg1
	syscall

	# read integer from the user
	li $v0, 5
	syscall
	move $t0, $v0

	# call the `math` function
	move $a0, $t0
	jal math                # save current PC in $ra, jump to `math`
	move $t1, $v0

	# print output msg
	li $v0, 4
	la $a0, msg2
	syscall

	# print function output
	li $v0, 1
	move $a0, $t1
	syscall

	# Exit program
	li $v0, 10
	syscall

# ------------------------------------------------------------------

	# FUNCTION: int myfunc(int a)
	# Arguments are stored in $a0
	# Return value is stored in $v0
	# Return address is stored in $ra (put there by jal instruction)

math:	  					  # multiply by 2 and add 5

	li $s0, 2           # store the multiple in a 'save' register
	mul $s1, $s0, $a0		# s1 = 2 * a0  (multiply input and save to s1)
	addi $s1, $s1, 5		# s1 = s1 + 5

	# Save the return value in $v0
	move $v0, $s1

	# Return from function
	jr $ra			# Jump to addr stored in $ra

# ------------------------------------------------------------------


.data
	msg1: .asciiz "Input N: "
	msg2: .asciiz "Output: "
